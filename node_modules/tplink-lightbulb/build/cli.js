#!/usr/bin/env node
'use strict';

var _lib = require('./lib');

var _lib2 = _interopRequireDefault(_lib);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _colorsys = require('colorsys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var arg = _yargs2.default.usage('Usage: $0 <COMMAND>').help('h').alias('h', 'help').command('scan', 'Scan for lightbulbs', function (yarg) {
  yarg.alias('timeout', 't').nargs('timeout', 1).describe('timeout', 'Timeout for scan (in seconds)').default('timeout', 0).alias('filter', 'f').nargs('filter', 1).describe('filter', 'filter to a specific class of devices (ie: IOT.SMARTBULB)').example('$0 scan -t 1', 'Get list of TP-Link smart devices on your network, stop after 1 second');
}, function (argv) {
  var scan = _lib2.default.scan(argv.filter).on('light', function (light) {
    console.log(light._info.address, '-', light._info.alias);
  });
  if (argv.timeout) {
    setTimeout(function () {
      scan.stop();
    }, argv.timeout * 1000);
  } else {
    console.log('Press Ctrl-C to stop');
  }
}).command('on <ip>', 'Turn on lightbulb', function (yarg) {
  yarg.boolean('quiet').describe('quiet', "Don't output return value of command").alias('quiet', 'q').alias('transition', 't').nargs('transition', 1).default('transition', 0).describe('t', 'Transition time').alias('brightness', 'b').nargs('brightness', 1).default('brightness', 100).describe('b', 'Brightness').example('$0 on 10.0.0.200', 'Turn on a light').example('$0 on -t 10 10.0.0.200', 'Take 10 seconds to turn on a light');
}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.set(true, argv.transition, { brightness: argv.brightness }).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('off <ip>', 'Turn off lightbulb', function (yarg) {
  yarg.boolean('quiet').describe('quiet', "Don't output return value of command").alias('quiet', 'q').alias('transition', 't').nargs('transition', 1).default('transition', 0).describe('t', 'Transition time').example('$0 off 10.0.0.200', 'Turn off a light').example('$0 off -t 10 10.0.0.200', 'Take 10 seconds to turn off a light');
}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.set(false, argv.transition).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('temp <ip> <color>', 'Set the color-temperature of the lightbulb (for those that support it)', function (yarg) {
  yarg.boolean('quiet').describe('quiet', "Don't output return value of command").alias('quiet', 'q').alias('transition', 't').nargs('transition', 1).default('transition', 0).describe('t', 'Transition time').example('$0 temp 10.0.0.200 1', 'Set color-temp to orangish').example('$0 temp 10.0.0.200 10000', 'Set color-temp to bluish');
}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.set(true, argv.transition, { hue: 0, saturation: 0, color_temp: argv.color }).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('hex <ip> <color>', 'Set color of lightbulb using hex color (for those that support it)', function (yarg) {
  yarg.boolean('quiet').describe('quiet', "Don't output return value of command").alias('quiet', 'q').alias('transition', 't').nargs('transition', 1).default('transition', 0).describe('t', 'Transition time').example('$0 hex 10.0.0.200 "#48258b"', 'Set the lightbulb to a nice shade of purple.').example('$0 hex -t 10 10.0.0.200 "#48258b"', 'Take 10 seconds to set the lightbulb to a nice shade of purple.');
}, function (argv) {
  var color = (0, _colorsys.hexToHsl)(argv.color);
  var bulb = new _lib2.default(argv.ip);
  bulb.set(true, argv.transition, { hue: color.h, saturation: color.s, brightness: color.l, color_temp: 0 }).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('hsb <ip> <hue> <saturation> <brightness>', 'Set color of lightbulb using HSB color (for those that support it)', function (yarg) {
  yarg.boolean('quiet').describe('quiet', "Don't output return value of command").alias('quiet', 'q').alias('transition', 't').nargs('transition', 1).default('transition', 0).describe('t', 'Transition time').example('$0 hsb 10.0.0.200 72 58 35', 'Set the lightbulb to a nice shade of purple.').example('$0 hsb -t 10 10.0.0.200 72 58 35', 'Take 10 seconds to set the lightbulb to a nice shade of purple.');
}, function (argv) {
  var transition = argv.transition,
      hue = argv.hue,
      saturation = argv.saturation,
      brightness = argv.brightness;

  var bulb = new _lib2.default(argv.ip);
  bulb.set(true, transition, { color_temp: 0, hue: hue, saturation: saturation, brightness: brightness }).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('cloud <ip>', 'Get cloud info', {}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.cloud().then(function (r) {
    return console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('raw <ip> <json>', 'Send a raw JSON command', {}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.send(JSON.parse(argv.json)).then(function (r) {
    return argv.quiet || console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).command('details <ip>', 'Get details about the device', {}, function (argv) {
  var bulb = new _lib2.default(argv.ip);
  bulb.details().then(function (r) {
    return console.log(JSON.stringify(r, null, 2));
  }).catch(console.error);
}).demandCommand(1, 1, 'You need a command.').example('$0 scan -h', 'Get more detailed help with `scan` command').example('$0 on -h', 'Get more detailed help with `on` command').example('$0 off -h', 'Get more detailed help with `off` command').example('$0 temp -h', 'Get more detailed help with `temp` command').example('$0 hex -h', 'Get more detailed help with `hex` command').example('$0 hsb -h', 'Get more detailed help with `hsb` command').example('$0 cloud -h', 'Get more detailed help with `cloud` command').example('$0 raw -h', 'Get more detailed help with `raw` command').example('$0 details -h', 'Get more detailed help with `details` command').argv;

